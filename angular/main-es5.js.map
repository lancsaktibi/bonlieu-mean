{"version":3,"sources":["/./$_lazy_route_resource lazy namespace object","/./src/app/app.component.html","/./src/app/auth/login/login.component.html","/./src/app/auth/signup/signup.component.html","/./src/app/header/header.component.html","/./src/app/posts/post-create/post-create.component.html","/./src/app/posts/post-list/post-list.component.html","/./src/app/app-routing.module.ts","/./src/app/app.component.css","/./src/app/app.component.ts","/./src/app/app.module.ts","/./src/app/auth/auth.service.ts","/./src/app/auth/login/login.component.css","/./src/app/auth/login/login.component.ts","/./src/app/auth/signup/signup.component.css","/./src/app/auth/signup/signup.component.ts","/./src/app/header/header.component.css","/./src/app/header/header.component.ts","/./src/app/posts/post-create/mime-type.validator.ts","/./src/app/posts/post-create/post-create.component.css","/./src/app/posts/post-create/post-create.component.ts","/./src/app/posts/post-list/post-list.component.css","/./src/app/posts/post-list/post-list.component.ts","/./src/app/posts/posts.service.ts","/./src/environments/environment.ts","/./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<app-header></app-header>\\n<main>\\n  <router-outlet></router-outlet>\\n</main>\\n\\n\"","module.exports = \"<mat-card>\\r\\n  <mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\r\\n  <form (submit)=\\\"onLogin(loginForm)\\\" #loginForm=\\\"ngForm\\\" *ngIf=\\\"!isLoading\\\">\\r\\n      <mat-form-field>\\r\\n        <input matInput name=\\\"email\\\" ngModel type=\\\"email\\\" placeholder=\\\"E-Mail\\\" #emailInput=\\\"ngModel\\\" required email>\\r\\n        <mat-error *ngIf=\\\"emailInput.invalid\\\">Please enter a valid e-mail!</mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput name=\\\"password\\\" ngModel type=\\\"password\\\" placeholder=\\\"Password\\\" #passwordInput=\\\"ngModel\\\" required>\\r\\n        <mat-error *ngIf=\\\"passwordInput.invalid\\\">Please enter a valid password!</mat-error>\\r\\n      </mat-form-field>\\r\\n      <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\">Login</button>\\r\\n  </form>\\r\\n  </mat-card>\\r\\n\"","module.exports = \"<mat-card>\\r\\n  <mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\r\\n  <form (submit)=\\\"onSignup(signupForm)\\\" #signupForm=\\\"ngForm\\\" *ngIf=\\\"!isLoading\\\">\\r\\n      <mat-form-field>\\r\\n        <input matInput name=\\\"email\\\" ngModel type=\\\"email\\\" placeholder=\\\"E-Mail\\\" #emailInput=\\\"ngModel\\\" required email>\\r\\n        <mat-error *ngIf=\\\"emailInput.invalid\\\">Please enter a valid e-mail!</mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput name=\\\"password\\\" ngModel type=\\\"password\\\" placeholder=\\\"Password\\\" #passwordInput=\\\"ngModel\\\" required>\\r\\n        <mat-error *ngIf=\\\"passwordInput.invalid\\\">Please enter a valid password!</mat-error>\\r\\n      </mat-form-field>\\r\\n      <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\">Signup</button>\\r\\n  </form>\\r\\n  </mat-card>\\r\\n\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <span><a routerLink=\\\"/\\\">bonli.eu</a></span>\\n  <span class=\\\"spacer\\\"></span>\\n  <ul>\\n    <li>\\n      <a mat-button routerLink=\\\"/create\\\" routerLinkActive=\\\"mat-accent\\\">New Post</a>\\n    </li>\\n    <li>\\n        <a mat-button routerLink=\\\"/login\\\" routerLinkActive=\\\"mat-accent\\\">Login</a>\\n      </li>\\n  <li>\\n    <a mat-button routerLink=\\\"/signup\\\" routerLinkActive=\\\"mat-accent\\\">Signup</a>\\n  </li>\\n</ul>\\n</mat-toolbar>\\n\"","module.exports = \"<mat-card>\\n  <mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\n  <form [formGroup]=\\\"form\\\" (submit)=\\\"onSavePost()\\\" *ngIf=\\\"!isLoading\\\">\\n      <mat-form-field>\\n        <input matInput type=\\\"text\\\" formControlName=\\\"title\\\" name=\\\"title\\\" placeholder=\\\"Post Title\\\">\\n        <mat-error *ngIf=\\\"form.get('title').invalid\\\">Please enter a post title!</mat-error>\\n      </mat-form-field>\\n      <div>\\n        <button mat-stroked-button type=\\\"button\\\" (click)=\\\"filePicker.click()\\\">Pick Image</button>\\n        <input type=\\\"file\\\" #filePicker (change)=\\\"onImagePicked($event)\\\">\\n      </div>\\n      <div class=\\\"image-preview\\\" *ngIf=\\\"imagePreview !== '' && imagePreview && form.get('image').valid\\\">\\n        <img [src]=\\\"imagePreview\\\" [alt]=\\\"form.value.title\\\">\\n      </div>\\n      <mat-form-field>\\n        <textarea matInput rows=\\\"4\\\" formControlName=\\\"content\\\" name=\\\"content\\\" placeholder=\\\"Post Content\\\"></textarea>\\n        <mat-error *ngIf=\\\"form.get('content').invalid\\\">Please enter a post content!</mat-error>\\n      </mat-form-field>\\n      <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\">Save Post</button>\\n  </form>\\n  </mat-card>\\n\"","module.exports = \"<mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\n<mat-accordion multi=\\\"true\\\" *ngIf=\\\"posts.length > 0 && !isLoading\\\">\\n  <mat-expansion-panel *ngFor=\\\"let post of posts\\\">\\n    <mat-expansion-panel-header>\\n      {{ post.title }}\\n    </mat-expansion-panel-header>\\n    <div class=\\\"post-image\\\">\\n      <img [src]=\\\"post.imagePath\\\" [alt]=\\\"post.imagePath\\\">\\n    </div>\\n    <p>{{ post.content }}</p>\\n    <mat-action-row>\\n      <a mat-button color=\\\"primary\\\" [routerLink]=\\\"['/edit', post.id]\\\">EDIT</a>\\n      <button mat-button color=\\\"warn\\\" (click)=\\\"onDelete(post.id)\\\">DELETE</button>\\n    </mat-action-row>\\n  </mat-expansion-panel>\\n</mat-accordion>\\n<mat-paginator [length]=\\\"totalPosts\\\" [pageSize]=\\\"postsPerPage\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" (page)=\\\"onChangedPage($event)\\\"\\n  *ngIf=\\\"posts.length > 0\\\"></mat-paginator>\\n<p class=\\\"info-text mat-body-1\\\" *ngIf=\\\"posts.length <=0 && !isLoading\\\">No Posts added yet!</p>\\n\"","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { PostListComponent } from './posts/post-list/post-list.component';\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\nimport { LoginComponent } from './auth/login/login.component';\nimport { SignupComponent } from './auth/signup/signup.component';\n\nconst routes: Routes = [\n  { path: '', component: PostListComponent },\n  { path: 'create', component: PostCreateComponent },\n  { path: 'edit/:postId', component: PostCreateComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'signup', component: SignupComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","module.exports = \"main {\\n  margin-top: 1rem;\\n  width: 80%;\\n  margin: auto;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBZ0I7RUFDaEIsVUFBVTtFQUNWLFlBQVk7QUFDZCIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWFpbiB7XG4gIG1hcmdpbi10b3A6IDFyZW07XG4gIHdpZHRoOiA4MCU7XG4gIG1hcmdpbjogYXV0bztcbn1cbiJdfQ== */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MatInputModule,\n  MatCardModule,\n  MatButtonModule,\n  MatToolbarModule,\n  MatExpansionModule,\n  MatProgressSpinnerModule,\n  MatPaginatorModule\n} from '@angular/material';\n\nimport { AppComponent } from './app.component';\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\nimport { HeaderComponent } from './header/header.component';\nimport { PostListComponent } from './posts/post-list/post-list.component';\nimport { PostsService } from './posts/posts.service';\nimport { AppRoutingModule } from './app-routing.module';\nimport { LoginComponent } from './auth/login/login.component';\nimport { SignupComponent } from './auth/signup/signup.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostCreateComponent,\n    HeaderComponent,\n    PostListComponent,\n    LoginComponent,\n    SignupComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    HttpClientModule\n  ],\n  providers: [PostsService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { environment } from 'src/environments/environment';\r\nimport { AuthData } from './auth-data.model';\r\n\r\n// global variable for url\r\nconst BACKEND_URL = environment.apiUrl + '/user/';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createUser(email: string, password: string) {\r\n    const authData: AuthData = {email, password};\r\n    this.http.post(BACKEND_URL + 'signup', authData)\r\n      .subscribe(response => {\r\n        console.log(response);\r\n      });\r\n  }\r\n}\r\n","module.exports = \"mat-form-field {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\nmat-spinner {\\r\\n  margin: auto;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsWUFBWTtBQUNkIiwiZmlsZSI6InNyYy9hcHAvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWZvcm0tZmllbGQge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG5tYXQtc3Bpbm5lciB7XHJcbiAgbWFyZ2luOiBhdXRvO1xyXG59XHJcbiJdfQ== */\"","import { Component } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n@Component({\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n  isLoading = false;\r\n\r\n  onLogin(form: NgForm) {\r\n    console.log(form.value);\r\n  }\r\n}\r\n","module.exports = \"mat-form-field {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\nmat-spinner {\\r\\n  margin: auto;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9zaWdudXAvc2lnbnVwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoic3JjL2FwcC9hdXRoL3NpZ251cC9zaWdudXAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1mb3JtLWZpZWxkIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxubWF0LXNwaW5uZXIge1xyXG4gIG1hcmdpbjogYXV0bztcclxufVxyXG4iXX0= */\"","import { Component } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css']\r\n})\r\nexport class SignupComponent {\r\n  isLoading = false;\r\n\r\n  constructor(public authService: AuthService) {}\r\n\r\n  onSignup(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    this.authService.createUser(form.value.email, form.value.password);\r\n  }\r\n}\r\n","module.exports = \"ul {\\n  list-style: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\na {\\n  text-decoration: none;\\n  color: white;\\n}\\n\\nul {\\n  display: -webkit-box;\\n  display: flex;\\n}\\n\\n.spacer {\\n  -webkit-box-flex: 1;\\n          flex: 1 1 auto;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvaGVhZGVyL2hlYWRlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFVBQVU7RUFDVixTQUFTO0FBQ1g7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsWUFBWTtBQUNkOztBQUVBO0VBQ0Usb0JBQWE7RUFBYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxtQkFBYztVQUFkLGNBQWM7QUFDaEIiLCJmaWxlIjoic3JjL2FwcC9oZWFkZXIvaGVhZGVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ1bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbn1cblxuYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG51bCB7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5zcGFjZXIge1xuICBmbGV4OiAxIDEgYXV0bztcbn1cbiJdfQ== */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\n\nexport class HeaderComponent {}\n","import { AbstractControl } from '@angular/forms';\nimport { Observable, Observer, of } from 'rxjs';\n\nexport const mimeType = (control: AbstractControl): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n\n  // check if filetype is string -- this happens if file is not updated\n  if (typeof(control.value) === 'string') {\n    return of(null);\n  }\n\n  const file = control.value as File;\n  const fileReader = new FileReader();\n\n  // we need to create an observable as mimeType should have it as a return value\n  const frObs = new Observable((observer: Observer<{ [key: string]: any }>) => {\n    fileReader.addEventListener('loadend', () => {\n\n      // create an unsigned 8 bit array for the arrayBuffer\n      // subarray (0, 4) contains the mimetype in the file\n      const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n\n      // check through the subarray\n      let header = '';\n      let isValid = false;\n      for (let i = 0; i < arr.length; i++) {\n\n        // attach char in hex to the header string\n        header += arr[i].toString(16);\n      }\n\n      // magic numbers - file signatures\n      switch (header) {\n        case '89504e47': // .png\n          isValid = true;\n          break;\n        case 'ffd8ffe0': // .jpg\n        case 'ffd8ffe1':\n        case 'ffd8ffe2':\n        case 'ffd8ffe3':\n        case 'ffd8ffe8':\n          isValid = true;\n          break;\n        default:\n          isValid = false; // Or you can use the blob.type as fallback\n          break;\n      }\n\n      // omit response data\n      if (isValid) {\n        observer.next(null); // omit null if mime type is valid -- equals no error in response\n      } else {\n        observer.next({ invalidMimeType: true }); // omit error code\n      }\n      observer.complete(); // let subscribers know we are done\n    });\n\n    fileReader.readAsArrayBuffer(file); // this triggers the load -- arraybuffer needed to determine mimetype\n  });\n\n  return frObs; // return the observable to the mimeType const\n};\n","module.exports = \"mat-form-field, textarea {\\n  width: 100%;\\n}\\n\\nmat-spinner {\\n  margin: auto;\\n}\\n\\ninput[type=\\\"file\\\"] {\\n  visibility: hidden;\\n}\\n\\n.image-preview {\\n  height: 1rem;\\n  margin: 1rem 0;\\n}\\n\\n.image-preview img {\\n  height: 100%;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcG9zdHMvcG9zdC1jcmVhdGUvcG9zdC1jcmVhdGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsWUFBWTtBQUNkIiwiZmlsZSI6InNyYy9hcHAvcG9zdHMvcG9zdC1jcmVhdGUvcG9zdC1jcmVhdGUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1mb3JtLWZpZWxkLCB0ZXh0YXJlYSB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG5tYXQtc3Bpbm5lciB7XG4gIG1hcmdpbjogYXV0bztcbn1cblxuaW5wdXRbdHlwZT1cImZpbGVcIl0ge1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG5cbi5pbWFnZS1wcmV2aWV3IHtcbiAgaGVpZ2h0OiAxcmVtO1xuICBtYXJnaW46IDFyZW0gMDtcbn1cblxuLmltYWdlLXByZXZpZXcgaW1nIHtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuIl19 */\"","import { Component, OnInit } from '@angular/core';\n\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PostsService } from '../posts.service';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Post } from '../post.model';\nimport { mimeType } from './mime-type.validator';\n\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\n\nexport class PostCreateComponent implements OnInit {\n  enteredTitle = '';\n  enteredContent = '';\n  post: Post; // intitalize only, should be public as we need to acess it in .html\n  isLoading = false;\n  form: FormGroup; // reactive form\n  imagePreview: string; // for the image preview\n  private mode = 'create'; // be in create mode by default, change it if postId exists\n  private postId: string; // initialize only\n\n  constructor(public postsService: PostsService, public route: ActivatedRoute) {}\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      content: new FormControl(null, {validators: [Validators.required]}),\n      image: new FormControl(null, {validators: [Validators.required], asyncValidators: [mimeType]})\n    });\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\n      if (paramMap.has('postId')) {\n        this.mode = 'edit';\n        this.postId = paramMap.get('postId');\n        this.isLoading = true; // enable load spinner\n        this.postsService.getPost(this.postId).subscribe(postData => {\n          this.isLoading = false; // disable load spinner once subscribe completed\n          this.post = {id: postData._id, title: postData.title, content: postData.content, imagePath: postData.imagePath};\n          this.form.setValue({\n            title: this.post.title,\n            content: this.post.content,\n            image: this.post.imagePath\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.postId = null;\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({image: file}); // update !only! image control with the extracted file\n    this.form.get('image').updateValueAndValidity(); // call auto validator to check for correct type etc.\n    const reader = new FileReader(); // to generate file url for the preview\n    reader.onload = () => {\n      this.imagePreview = reader.result as string; // after image loaded, store url\n    };\n    reader.readAsDataURL(file); // this is to trigger the load into a file url\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    if (this.mode === 'create') {\n      console.log('ng create mode');\n      this.postsService.addPost(this.form.value.title, this.form.value.content, this.form.value.image);\n    } else {\n      console.log('ng edit mode');\n      this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content, this.form.value.image);\n    }\n    this.form.reset(); // to clear data after submission\n  }\n}\n","module.exports = \":host {\\n  display: block;\\n  margin-top: 1rem;\\n}\\n\\n.info-text {\\n  text-align: center;\\n}\\n\\nmat-spinner {\\n  margin: auto;\\n}\\n\\nmat-paginator {\\n  margin-top: 1rem;\\n}\\n\\n.post-image {\\n  width: 100%;\\n}\\n\\n.post-image img {\\n  width: 100%;\\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcG9zdHMvcG9zdC1saXN0L3Bvc3QtbGlzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBYztFQUNkLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLFdBQVc7RUFDWCwwQ0FBMEM7QUFDNUMiLCJmaWxlIjoic3JjL2FwcC9wb3N0cy9wb3N0LWxpc3QvcG9zdC1saXN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tdG9wOiAxcmVtO1xufVxuXG4uaW5mby10ZXh0IHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG5tYXQtc3Bpbm5lciB7XG4gIG1hcmdpbjogYXV0bztcbn1cblxubWF0LXBhZ2luYXRvciB7XG4gIG1hcmdpbi10b3A6IDFyZW07XG59XG5cbi5wb3N0LWltYWdlIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi5wb3N0LWltYWdlIGltZyB7XG4gIHdpZHRoOiAxMDAlO1xuICBib3gtc2hhZG93OiAxcHggMXB4IDVweCByZ2JhKDAsIDAsIDAsIDAuNSk7XG59XG4iXX0= */\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { PageEvent } from '@angular/material';\nimport { Subscription } from 'rxjs';\n\nimport { Post } from '../post.model';\nimport { PostsService } from '../posts.service';\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.css']\n})\nexport class PostListComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n  isLoading = false;\n  totalPosts = 0; // total posts initial value for paginator\n  postsPerPage = 2; // items per page for paginator\n  pageSizeOptions = [1, 2, 5, 10]; // options for user to show items for paginator\n  currentPage = 1; // initial value for paginator\n  private postsSub: Subscription;\n\n  //  posts = [\n  //    {title: 'First Post', content: 'This is the first post text'},\n  //    {title: 'Second Post', content: 'This is the second post text'},\n  //    {title: 'Third Post', content: 'This is the third post text'}\n  //  ];\n\n  constructor(public postsService: PostsService) {}\n\n  ngOnInit() {\n    this.isLoading = true; // to show spinner\n    this.postsService.getPosts(this.postsPerPage, this.currentPage); // triggers getPost -- with paginator init params\n    this.postsSub = this.postsService.getPostUpdateListener()\n      .subscribe((postData: {posts: Post[], postCount: number}) => {\n        this.isLoading = false; // to hide spinner once subscribe completed\n        this.totalPosts = postData.postCount; // to set total posts as received from backend\n        this.posts = postData.posts; // replace original posts with the received array, store data in subscription property (no mem leak)\n      });\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true; // to show spinner\n    this.currentPage = pageData.pageIndex + 1; // user input, but +1 as backend starts with 1 not 0\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPosts(this.postsPerPage, this.currentPage); // trigger getPosts with user params\n  }\n\n  onDelete(postId: string) {\n    this.isLoading = true; // to show spinner\n    this.postsService.deletePost(postId).subscribe(() => {\n      this.postsService.getPosts(this.postsPerPage, this.currentPage);\n    }); // as we used a return function in service.ts deletePost(), on completion we run a getPosts() here\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe(); // deactivate subscription when component destroyed\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { Post } from './post.model';\nimport { environment } from 'src/environments/environment';\n\n// global variable for url\nconst BACKEND_URL = environment.apiUrl + '/posts/';\n\n@Injectable({providedIn: 'root'})\nexport class PostsService {\n  private posts: Post[] = [];\n  private postsUpdated = new Subject<{posts: Post[], postCount: number}>(); // create a copy of the array\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getPosts(postsPerPage: number, currentPage: number) {\n    const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n    this.http.get<{message: string, posts: any, maxPosts: number}>(BACKEND_URL + queryParams)\n      .pipe(\n        map((postData) => {\n          return {\n            posts: postData.posts.map(post => {\n              return {\n                title: post.title,\n                content: post.content,\n                id: post._id,\n                imagePath: post.imagePath\n              };\n            }),\n            maxPosts: postData.maxPosts\n          };\n        })\n      )\n      .subscribe((transformedPostData) => {\n        this.posts = transformedPostData.posts;\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          postCount: transformedPostData.maxPosts\n        }); // update the copy of the array, spread it through the app\n      });\n  }\n\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable(); // listens to requests, returns the copy of the array\n  }\n\n  // to get a single post for edit\n  getPost(id: string) {\n    return this.http.get<{ _id: string, title: string, content: string, imagePath: string }>(BACKEND_URL + id);\n  }\n\n  addPost(title: string, content: string, image: File) {\n    // get data with formData method\n    const postData = new FormData();\n    postData.append('title', title);\n    postData.append('content', content);\n    postData.append('image', image, title); // title will be the filename of the image\n\n    this.http.post<{message: string, post: Post}>(BACKEND_URL, postData)\n      .subscribe((responseData) => {\n        this.router.navigate(['/']); // redirect -- onInit() will reload the posts anyhow (here was a reload script but no more needed)\n      });\n  }\n\n  updatePost(id: string, title: string, content: string, image: File | string) {\n\n    // check whether we have a new file or only a link in image\n    let postData: FormData | Post;\n    if (typeof(image) === 'object' ) {\n      // get data with formData method\n      postData = new FormData();\n      postData.append('id', id); // this is to keep the old id in mongo\n      postData.append('title', title);\n      postData.append('content', content);\n      postData.append('image', image, title); // title will be the filename of the image\n    } else {\n        postData = {\n          id,\n          title,\n          content,\n          imagePath: image\n        };\n    }\n\n    this.http.put(BACKEND_URL + id, postData)\n      .subscribe(response => {\n        this.router.navigate(['/']); // redirect -- onInit() will reload the posts anyhow (here was a reload script but no more needed)\n      });\n  }\n\n  deletePost(postId: string) {\n    return this.http.delete(BACKEND_URL + postId);\n    // continue in list.ts onDelete() as we need to refetch posts there\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost/api'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}